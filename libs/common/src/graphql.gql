# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type auth {
  id: ID!
  password: String!
  refreshToken: String
  user: user!
  userId: String!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type post {
  id: ID!
  name: String!
  somethingElse: String!
  User: user
  userId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserCount {
  post: Int!
}

type user {
  id: ID!
  username: String!
  email: String!
  firstname: String
  lastname: String
  role: Role!
  auth: auth
  createdAt: DateTime!
  updatedAt: DateTime!
  post: [post!]
  _count: UserCount!
}

enum Role {
  ADMIN
  USER
}

type Query {
  users(where: userWhereInput, orderBy: [userOrderByWithRelationInput!], cursor: userWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [user!]!
  user(id: String!): user!
}

input userWhereInput {
  AND: [userWhereInput!]
  OR: [userWhereInput!]
  NOT: [userWhereInput!]
  id: StringFilter
  username: StringFilter
  email: StringFilter
  firstname: StringNullableFilter
  lastname: StringNullableFilter
  role: EnumRoleFilter
  auth: AuthRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  post: PostListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input AuthRelationFilter {
  is: authWhereInput
  isNot: authWhereInput
}

input authWhereInput {
  AND: [authWhereInput!]
  OR: [authWhereInput!]
  NOT: [authWhereInput!]
  id: StringFilter
  password: StringFilter
  refreshToken: StringNullableFilter
  user: UserRelationFilter
  userId: StringFilter
  updatedAt: DateTimeFilter
}

input UserRelationFilter {
  is: userWhereInput
  isNot: userWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input PostListRelationFilter {
  every: postWhereInput
  some: postWhereInput
  none: postWhereInput
}

input postWhereInput {
  AND: [postWhereInput!]
  OR: [postWhereInput!]
  NOT: [postWhereInput!]
  id: StringFilter
  name: StringFilter
  somethingElse: StringFilter
  User: UserRelationFilter
  userId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input userOrderByWithRelationInput {
  id: SortOrder
  username: SortOrder
  email: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  role: SortOrder
  auth: authOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
  post: postOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input authOrderByWithRelationInput {
  id: SortOrder
  password: SortOrder
  refreshToken: SortOrder
  user: userOrderByWithRelationInput
  userId: SortOrder
  updatedAt: SortOrder
}

input postOrderByRelationAggregateInput {
  _count: SortOrder
}

input userWhereUniqueInput {
  id: String
}

enum UserScalarFieldEnum {
  id
  username
  email
  firstname
  lastname
  role
  createdAt
  updatedAt
}

type Mutation {
  createUser(createUserInput: userCreateInput!): user!
  updateUser(updateUserInput: userUpdateInput!): user!
  removeUser(id: String!): user!
}

input userCreateInput {
  id: String
  username: String!
  email: String!
  firstname: String
  lastname: String
  role: Role
  auth: authCreateNestedOneWithoutUserInput
  createdAt: DateTime
  updatedAt: DateTime
  post: postCreateNestedManyWithoutUserInput
}

input authCreateNestedOneWithoutUserInput {
  create: authCreateWithoutUserInput
  connectOrCreate: authCreateOrConnectWithoutUserInput
  connect: authWhereUniqueInput
}

input authCreateWithoutUserInput {
  id: String
  password: String!
  refreshToken: String
  updatedAt: DateTime
}

input authCreateOrConnectWithoutUserInput {
  where: authWhereUniqueInput!
  create: authCreateWithoutUserInput!
}

input authWhereUniqueInput {
  id: String
  userId: String
}

input postCreateNestedManyWithoutUserInput {
  create: [postCreateWithoutUserInput!]
  connectOrCreate: [postCreateOrConnectWithoutUserInput!]
  createMany: postCreateManyUserInputEnvelope
  connect: [postWhereUniqueInput!]
}

input postCreateWithoutUserInput {
  id: String
  name: String!
  somethingElse: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input postCreateOrConnectWithoutUserInput {
  where: postWhereUniqueInput!
  create: postCreateWithoutUserInput!
}

input postWhereUniqueInput {
  id: String
}

input postCreateManyUserInputEnvelope {
  data: [postCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input postCreateManyUserInput {
  id: String
  name: String!
  somethingElse: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input userUpdateInput {
  id: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  auth: authUpdateOneWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: postUpdateManyWithoutUserNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input authUpdateOneWithoutUserNestedInput {
  create: authCreateWithoutUserInput
  connectOrCreate: authCreateOrConnectWithoutUserInput
  upsert: authUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: authWhereUniqueInput
  update: authUpdateWithoutUserInput
}

input authUpsertWithoutUserInput {
  update: authUpdateWithoutUserInput!
  create: authCreateWithoutUserInput!
}

input authUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input postUpdateManyWithoutUserNestedInput {
  create: [postCreateWithoutUserInput!]
  connectOrCreate: [postCreateOrConnectWithoutUserInput!]
  upsert: [postUpsertWithWhereUniqueWithoutUserInput!]
  createMany: postCreateManyUserInputEnvelope
  set: [postWhereUniqueInput!]
  disconnect: [postWhereUniqueInput!]
  delete: [postWhereUniqueInput!]
  connect: [postWhereUniqueInput!]
  update: [postUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [postUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [postScalarWhereInput!]
}

input postUpsertWithWhereUniqueWithoutUserInput {
  where: postWhereUniqueInput!
  update: postUpdateWithoutUserInput!
  create: postCreateWithoutUserInput!
}

input postUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  somethingElse: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input postUpdateWithWhereUniqueWithoutUserInput {
  where: postWhereUniqueInput!
  data: postUpdateWithoutUserInput!
}

input postUpdateManyWithWhereWithoutUserInput {
  where: postScalarWhereInput!
  data: postUpdateManyMutationInput!
}

input postScalarWhereInput {
  AND: [postScalarWhereInput!]
  OR: [postScalarWhereInput!]
  NOT: [postScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  somethingElse: StringFilter
  userId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input postUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  somethingElse: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}